//
// Sobel Edge Detection Filter - PTX Assembly
//
// CUDA C equivalent function signature:
// __global__ void sobel_filter(unsigned char* input, unsigned char* output, int width, int height)
//
// Parameters:
// sobel_filter_param_0: input buffer pointer (unsigned char*)
// sobel_filter_param_1: output buffer pointer (unsigned char*) 
// sobel_filter_param_2: image width (int)
// sobel_filter_param_3: image height (int)
//
// Thread indexing (CUDA C equivalent):
// int x = blockIdx.x * blockDim.x + threadIdx.x;
// int y = blockIdx.y * blockDim.y + threadIdx.y;
//
// Sobel kernels:
// X: [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]]
// Y: [[-1,-2,-1], [ 0, 0, 0], [ 1, 2, 1]]
//

.version 8.0
.target sm_50
.address_size 64

.visible .entry sobel_filter(
	.param .u64 sobel_filter_param_0,    // input buffer
	.param .u64 sobel_filter_param_1,    // output buffer
	.param .u32 sobel_filter_param_2,    // width
	.param .u32 sobel_filter_param_3     // height
)
{
	// Register declarations
	.reg .pred 	%p<13>;           // predicate registers
	.reg .b16 	%rs<4>;           // 16-bit registers  
	.reg .b32 	%r<39>;           // 32-bit registers
	.reg .b64 	%rd<11>;          // 64-bit registers

	// Load kernel parameters (CUDA C: function arguments)
	ld.param.u64 	%rd1, [sobel_filter_param_0];  // input buffer
	ld.param.u64 	%rd2, [sobel_filter_param_1];  // output buffer  
	ld.param.u32 	%r1, [sobel_filter_param_2];   // width
	ld.param.u32 	%r2, [sobel_filter_param_3];   // height
	
	// Calculate thread indices (CUDA C: blockIdx.x * blockDim.x + threadIdx.x)
	mov.u32 	%r3, %ctaid.x;     // blockIdx.x
	mov.u32 	%r4, %nctaid.x;    // gridDim.x  
	mov.u32 	%r5, %tid.x;       // threadIdx.x
	mad.lo.s32 	%r6, %r4, %r3, %r5;   // x = blockIdx.x * blockDim.x + threadIdx.x
	
	mov.u32 	%r7, %ctaid.y;     // blockIdx.y
	mov.u32 	%r8, %nctaid.y;    // gridDim.y
	mov.u32 	%r9, %tid.y;       // threadIdx.y  
	mad.lo.s32 	%r10, %r8, %r7, %r9;  // y = blockIdx.y * blockDim.y + threadIdx.y
	// Boundary checks (CUDA C: if (x >= width || y >= height) return;)
	setp.ge.s32	%p1, %r6, %r1;     // x >= width
	setp.ge.s32	%p2, %r10, %r2;    // y >= height  
	or.pred  	%p3, %p1, %p2;     // x >= width || y >= height
	@%p3 bra 	BB0_14;            // branch to exit if out of bounds

	// Border pixel checks (CUDA C: if (x == 0 || y == 0 || x == width-1 || y == height-1))
	setp.eq.s32	%p4, %r6, 0;       // x == 0
	setp.eq.s32	%p5, %r10, 0;      // y == 0
	or.pred  	%p6, %p4, %p5;     // x == 0 || y == 0
	add.s32 	%r11, %r1, -1;     // width - 1
	setp.eq.s32	%p7, %r6, %r11;    // x == width-1
	or.pred  	%p8, %p6, %p7;     // (x == 0 || y == 0) || x == width-1
	add.s32 	%r12, %r2, -1;     // height - 1  
	setp.eq.s32	%p9, %r10, %r12;   // y == height-1
	or.pred  	%p10, %p8, %p9;    // border pixel check
	@%p10 bra 	BB0_13;            // branch to border handling

	add.s32 	%r13, %r10, -1;
	mad.lo.s32 	%r14, %r13, %r1, %r6;
	add.s32 	%r15, %r14, -1;
	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r15, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u8 	%rs1, [%rd5];
	cvt.u32.u16	%r16, %rs1;
	mul.wide.s32 	%rd6, %r14, 4;
	add.s64 	%rd7, %rd3, %rd6;
	ld.global.u8 	%rs2, [%rd7];
	cvt.u32.u16	%r17, %rs2;
	add.s32 	%r18, %r14, 1;
	mul.wide.s32 	%rd8, %r18, 4;
	add.s64 	%rd9, %rd3, %rd8;
	ld.global.u8 	%rs3, [%rd9];
	cvt.u32.u16	%r19, %rs3;
	mad.lo.s32 	%r20, %r10, %r1, %r6;
	add.s32 	%r21, %r20, -1;
	mul.wide.s32 	%rd10, %r21, 4;
	add.s64 	%rd11, %rd3, %rd10;
	ld.global.u8 	%rs4, [%rd11];
	cvt.u32.u16	%r22, %rs4;
	add.s32 	%r23, %r20, 1;
	mul.wide.s32 	%rd12, %r23, 4;
	add.s64 	%rd13, %rd3, %rd12;
	ld.global.u8 	%rs5, [%rd13];
	cvt.u32.u16	%r24, %rs5;
	add.s32 	%r25, %r10, 1;
	mad.lo.s32 	%r26, %r25, %r1, %r6;
	add.s32 	%r27, %r26, -1;
	mul.wide.s32 	%rd14, %r27, 4;
	add.s64 	%rd15, %rd3, %rd14;
	ld.global.u8 	%rs6, [%rd15];
	cvt.u32.u16	%r28, %rs6;
	mul.wide.s32 	%rd16, %r26, 4;
	add.s64 	%rd17, %rd3, %rd16;
	ld.global.u8 	%rs7, [%rd17];
	cvt.u32.u16	%r29, %rs7;
	add.s32 	%r30, %r26, 1;
	mul.wide.s32 	%rd18, %r30, 4;
	add.s64 	%rd19, %rd3, %rd18;
	ld.global.u8 	%rs8, [%rd19];
	cvt.u32.u16	%r31, %rs8;

	// Sobel X kernel: -1 0 1, -2 0 2, -1 0 1
	sub.s32 	%r32, %r19, %r16;
	sub.s32 	%r33, %r24, %r22;
	shl.b32 	%r34, %r33, 1;
	add.s32 	%r32, %r32, %r34;
	sub.s32 	%r35, %r31, %r28;
	add.s32 	%r32, %r32, %r35;

	// Sobel Y kernel: -1 -2 -1, 0 0 0, 1 2 1
	sub.s32 	%r36, %r28, %r16;
	sub.s32 	%r37, %r29, %r17;
	shl.b32 	%r38, %r37, 1;
	add.s32 	%r36, %r36, %r38;
	sub.s32 	%r39, %r31, %r19;
	add.s32 	%r36, %r36, %r39;

	// Calculate magnitude: sqrt(gx^2 + gy^2)
	mul.lo.s32 	%r32, %r32, %r32;
	mul.lo.s32 	%r36, %r36, %r36;
	add.s32 	%r32, %r32, %r36;
	cvt.rn.f32.s32	%f1, %r32;
	sqrt.rn.f32 	%f2, %f1;
	cvt.rzi.s32.f32	%r32, %f2;

	// Clamp to 0-255
	max.s32 	%r32, %r32, 0;
	min.s32 	%r32, %r32, 255;
	cvt.u8.u32 	%rs1, %r32;

	cvta.to.global.u64 	%rd20, %rd2;
	mul.wide.s32 	%rd21, %r20, 4;
	add.s64 	%rd22, %rd20, %rd21;
	st.global.u8 	[%rd22], %rs1;
	bra.uni 	BB0_14;

BB0_13:
	// Border pixels: copy input to output
	mad.lo.s32 	%r40, %r10, %r1, %r6;
	cvta.to.global.u64 	%rd23, %rd1;
	mul.wide.s32 	%rd24, %r40, 4;
	add.s64 	%rd25, %rd23, %rd24;
	ld.global.u8 	%rs9, [%rd25];
	cvta.to.global.u64 	%rd26, %rd2;
	add.s64 	%rd27, %rd26, %rd24;
	st.global.u8 	[%rd27], %rs9;

BB0_14:
	ret;
}